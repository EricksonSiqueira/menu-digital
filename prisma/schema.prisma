generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      String              @id @default(uuid())
  name                    String              @db.VarChar(255)
  slug                    String              @db.VarChar(255)
  status                  CompanyStatus       @default(ACTIVE)
  info                    Info?
  requests                Requests?
  branchs                 Branch[]
  products                Products[]
  productCategory         ProductCategories[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Branch {
  id        String        @id @default(uuid())
  name      String        @db.VarChar(255)
  slug      String        @db.VarChar(255)
  status    CompanyStatus @default(ACTIVE)
  companyId String
  info      Info?
  requests  Requests?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  company   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Info {
  id                  String   @id @default(uuid())
  cnpj                String   @db.VarChar(255)
  email               String   @db.VarChar(255)
  phoneNumber         String   @db.VarChar(255)
  deliveryPhoneNumber String?
  companyLogoUrl      String?
  companyThemeUrl     String?
  address             Address?
  companyId           String   @unique
  branchId            String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  branch              Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(uuid())
  address   String   @db.VarChar(255)
  zipCode   String   @db.VarChar(255)
  infoId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  info      Info     @relation(fields: [infoId], references: [id], onDelete: Cascade)
}

model Requests {
  id              String     @id @default(uuid())
  products        String
  companyId       String     @unique
  branchId        String?    @unique
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  branch          Branch?    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model ProductsComplements {
  products         Products     @relation(fields: [productsId], references: [id], onDelete: Cascade)
  complements      Complements  @relation(fields: [complementId], references: [id], onDelete: Cascade)
  productsId       String
  complementId     String

  @@id([productsId, complementId])
}

model Complements {
  id                  String     @id @default(uuid())
  name                String
  maxAmount           Int?
  productsComplements ProductsComplements[]
  items               Items[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Items {
  id            String       @id @default(uuid())
  name          String
  price         Decimal?     @db.Money
  complements   Complements  @relation(fields: [complementId], references: [id], onDelete: Cascade)
  complementId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ProductCategories {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(255)
  companyId      String?
  company        Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product        Products[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Products {
  id                    String              @id @default(uuid())
  name                  String              @db.VarChar(255)
  description           String
  price                 Decimal             @db.Money
  discount              Int?
  companyId             String?
  productCategoriesId   String?
  productsImages        ProductImages[]
  productsComplements   ProductsComplements[]
  company               Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  productCategories     ProductCategories?  @relation(fields: [productCategoriesId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ProductImages {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String
  alt       String   @db.VarChar(500)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}
